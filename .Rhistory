knitr::opts_chunk$set(echo = TRUE)
data <- read_csv("heart.csv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(readr)
data <- read_csv("heart.csv")
head(data)
dim(data)  # broj redaka, broj stupaca (broj primjera, broj varijabli)
cat("Number of rows: ", nrow(data), "\n")
cat("Number of columns: ", ncol(data), "\n")
cat("Column names:", paste(colnames(data), collapse = ", "), "\n")
cat("Number of rows is ", nrow(data), "\n")
for (collumn in colnames(data)){
cat("Column: ", collumn, "has ", length(unique(data[[collumn]])), " unique values\n")
}
data %>% is.na() %>% colSums()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(readr)
data <- read_csv("heart.csv")
head(data)
dim(data)  # broj redaka, broj stupaca (broj primjera, broj varijabli)
cat("Number of rows: ", nrow(data), "\n")
cat("Number of columns: ", ncol(data), "\n")
cat("Column names:", paste(colnames(data), collapse = ", "), "\n")
cat("Number of rows is ", nrow(data), "\n")
for (collumn in colnames(data)){
cat("Column: ", collumn, "has ", length(unique(data[[collumn]])), " unique values\n")
}
data %>% is.na() %>% colSums()
cat(unique(data$Sex), "\n")
oldCategoricalData <- data
data$Sex <- as.numeric(factor(data$Sex, levels = c("F", "M"), labels = c(0, 1))) - 1
data$ExerciseAngina <- as.numeric(factor(data$ExerciseAngina, levels = c("N", "Y"), labels = c(0, 1))) - 1
data$ChestPainType <- as.numeric(factor(data$ChestPainType, levels = c("TA", "ATA", "NAP", "ASY"), labels = c(0, 1, 2, 3)))
data$RestingECG <- as.numeric(factor(data$RestingECG, levels = c("Normal", "ST", "LVH"), labels = c(0, 1, 2)))
data$ST_Slope <- as.numeric(factor(data$ST_Slope, levels = c("Up", "Flat", "Down"), labels = c(0, 1, 2)))
data[-c(2,3,6,7,9,11,12)] %>% summary()
knitr::opts_chunk$set(echo = TRUE)
# učestalost pojavljivanja vrijednosti za kategoričke značajke
for (column in c(2, 3, 6, 7, 9, 11, 12)) {
column_name <- colnames(oldCategoricalData)[column]
column_values <- oldCategoricalData[[column]]
cat("Column:", column_name, "has values:\n")
print(table(column_values))
cat("\n")
}
unNormalizedData <- data
data[-c(2,3,6,7,9,11,12)] <- scale(data[-c(2,3,6,7,9,11,12)])
knitr::opts_chunk$set(echo = TRUE)
withAngine <- data[data$ExerciseAngina == 1,]
withoutAngine <- data[data$ExerciseAngina == 0,]
maxHRWithAngine <- withAngine$MaxHR
maxHRWithoutAngine <- withoutAngine$MaxHR
# crtamo Q-Q plot kako bismo vidjeli odgovaraju li podatci normalnoj raspodjeli
qqnorm(maxHRWithAngine, main = "Q-Q plot for MaxHR with angine")
qqline(maxHRWithAngine)
qqnorm(maxHRWithoutAngine , main = "Q-Q plot for MaxHR without angine")
qqline(maxHRWithoutAngine)
# isto radimo s histogramima
hist(maxHRWithAngine, main = "Histogram for MaxHR with angine")
hist(maxHRWithoutAngine, main = "Histogram for MaxHR without angine")
library(nortest)
lillie.test(maxHRWithoutAngine)
lillie.test(maxHRWithAngine)
#ode mi pokazuje da nista nije po nomralnoj raspodjeli pa nez sta tu napravit
library(nortest)
lillie.test(maxHRWithoutAngine)
lillie.test(maxHRWithAngine)
var(maxHRWithoutAngine)
var(maxHRWithAngine)
var.test(maxHRWithAngine, maxHRWithoutAngine)
t.test(maxHRWithAngine, maxHRWithoutAngine, var.equal = FALSE)
colors <- ifelse(oldCategoricalData$HeartDisease == 1, rgb(1,0,0,0.5), rgb(0,0,1,0.5))
plot(oldCategoricalData$Age, oldCategoricalData$MaxHR, col = colors, main = "Scatter plot for Age and MaxHR", xlab = "Age", ylab = "MaxHR", pch = 19)
legend("topright", legend = c("Heart Disease", "No Heart Disease"), fill = c("red", "blue"))
library(ggcorrplot)
predictor <- data.frame(data$Age, data$MaxHR)
cor(predictor)
#ggcorrplot(cor(predictor), hc.order = TRUE, type = "lower", lab = TRUE)
logisticModel <- glm(HeartDisease ~ MaxHR + Age, data = data, family = binomial)
summary(logisticModel)
library(pROC)
# Predikcije
predictions <- predict(logisticModel, type = "response")
# ROC krivulja
roc_curve <- roc(data$HeartDisease, predictions)
plot(roc_curve, main = "ROC Curve")
# AUC vrijednost
auc(roc_curve)
# crtamo Q-Q plot da vidimo odgovaraju li podatci normalnoj raspodjeli
male <- data[data$Sex == 1,]
female <- data[data$Sex == 0,]
maxHRMale <- male$MaxHR
maxHRFemale <- female$MaxHR
qqnorm(maxHRMale, main = "Q-Q plot for males")
qqline(maxHRMale)
qqnorm(maxHRFemale , main = "Q-Q plot for females")
qqline(maxHRFemale)
# histogrami
hist(maxHRMale, main = "Histogram for males")
hist(maxHRFemale, main = "Histogram for females")
var(maxHRMale)
var(maxHRFemale)
var.test(maxHRMale, maxHRFemale)
t.test(maxHRMale, maxHRFemale, var.equal = FALSE)
library(tidyverse)
data %>% group_by(Sex) %>% summarise(
NumOfPatients = n(),
HeartDiseaseRatio = sum(HeartDisease)/n(),
FastingBSRatio = sum(FastingBS)/n(),
ExerciseAnginaRatio = sum(ExerciseAngina)/n(),
Mean.Age = mean(Age),
Med.Age = median(Age),
Mean.RestingBP = mean(RestingBP),
Med.RestingBP = median(RestingBP),
StdDev.RestingBP = sd(RestingBP),
Mean.Cholesterol = mean(Cholesterol),
StdDev.Cholesterol = sd(Cholesterol),
Med.Cholesterol = median(Cholesterol),
Mean.MaxHR = mean(MaxHR),
StdDev.MaxHR = sd(MaxHR),
Med.MaxHR = median(MaxHR),
Mean.OldPeak = mean(Oldpeak),
StdDev.OldPeak = sd(Oldpeak),
Med.OldPeak = median(Oldpeak)
)
boxplot(Cholesterol ~ Sex, data = data)
boxplot(MaxHR ~ Sex, data = data)
library(tidyverse)
helperData <- data
dataWithAgeCategory <- helperData %>% mutate(ageCategory = cut(data$Age,
breaks = c(0, 30, 50, 70, 90, 120),  # Define the break points
labels = c("Category-1", "Category-2", "Category-3", "Category-4", "Category-5"),
right = TRUE))
dataWithAgeCategory %>% group_by(ageCategory) %>% summarise(
NumOfPatients = n(),
HeartDiseaseRatio = sum(HeartDisease)/n(),
FastingBSRatio = sum(FastingBS)/n(),
ExerciseAnginaRatio = sum(ExerciseAngina)/n(),
Mean.Age = mean(Age),
Med.Age = median(Age),
Mean.RestingBP = mean(RestingBP),
Med.RestingBP = median(RestingBP),
StdDev.RestingBP = sd(RestingBP),
Mean.Cholesterol = mean(Cholesterol),
StdDev.Cholesterol = sd(Cholesterol),
Med.Cholesterol = median(Cholesterol),
Mean.MaxHR = mean(MaxHR),
StdDev.MaxHR = sd(MaxHR),
Med.MaxHR = median(MaxHR),
Mean.OldPeak = mean(Oldpeak),
StdDev.OldPeak = sd(Oldpeak),
Med.OldPeak = median(Oldpeak)
)
{plot(data$Age, data$Cholesterol,
col="blue",
xlab='Age',
ylab='Cholesterol Level')
abline(lm(data$Cholesterol ~ data$Age), col="red")}
x <- data$Age
y <- data$MaxHR
model = lm(y ~ x)
{plot(x, y,
col="blue",
xlab='Age',
ylab='MaxHR')
abline(model, col = "red")}
{plot(data$Age, data$Oldpeak,
col="blue",
xlab='Age',
ylab='OldPeak')
abline(lm(data$Oldpeak ~ data$Age), col = "red")}
library(tidyverse)
data %>% group_by(HeartDisease) %>% summarise(
NumOfPatients = n(),
FastingBSRatio = sum(FastingBS)/n(),
ExerciseAnginaRatio = sum(ExerciseAngina)/n(),
Mean.Age = mean(Age),
Med.Age = median(Age),
Mean.RestingBP = mean(RestingBP),
Med.RestingBP = median(RestingBP),
StdDev.RestingBP = sd(RestingBP),
Mean.Cholesterol = mean(Cholesterol),
StdDev.Cholesterol = sd(Cholesterol),
Med.Cholesterol = median(Cholesterol),
Mean.MaxHR = mean(MaxHR),
StdDev.MaxHR = sd(MaxHR),
Med.MaxHR = median(MaxHR),
Mean.OldPeak = mean(Oldpeak),
StdDev.OldPeak = sd(Oldpeak),
Med.OldPeak = median(Oldpeak)
)
boxplot(Cholesterol ~ HeartDisease, data = data)
boxplot(MaxHR ~ HeartDisease, data = data)
boxplot(Oldpeak ~ HeartDisease, data = data)
boxplot(Age ~ HeartDisease, data = data)
diseased <- data[data$HeartDisease == 1, ]
healthy <- data[data$HeartDisease == 0, ]
hist(diseased$MaxHR)
hist(healthy$MaxHR)
library(tidyverse)
data %>% group_by(FastingBS) %>% summarise(
NumOfPatients = n(),
HeartDiseaseRatio = sum(HeartDisease)/n(),
Mean.Age = mean(Age),
Med.Age = median(Age),
Mean.RestingBP = mean(RestingBP),
Med.RestingBP = median(RestingBP),
StdDev.RestingBP = sd(RestingBP),
Mean.Cholesterol = mean(Cholesterol),
StdDev.Cholesterol = sd(Cholesterol),
Med.Cholesterol = median(Cholesterol),
Mean.MaxHR = mean(MaxHR),
StdDev.MaxHR = sd(MaxHR),
Med.MaxHR = median(MaxHR),
Mean.OldPeak = mean(Oldpeak),
StdDev.OldPeak = sd(Oldpeak),
Med.OldPeak = median(Oldpeak)
)
data_copy = data.frame(data);
tracemem(data)==tracemem(data_copy);
untracemem(data_copy);
tbl_angina = table(data_copy$Sex)
print(tbl_angina)
tbl_angina = table(data_copy$Sex,
data_copy$ExerciseAngina)
tbl_angina
added_margins_tbl_angina = addmargins(tbl_angina)
print(added_margins_tbl_angina)
for (col_names in colnames(added_margins_tbl_angina)){
for (row_names in rownames(added_margins_tbl_angina)){
if (!(row_names == 'Sum' | col_names == 'Sum') ){
cat('Očekivane frekvencije za razred ',col_names,'-',row_names,': ',(added_margins_tbl_angina[row_names,'Sum'] * added_margins_tbl_angina['Sum',col_names]) / added_margins_tbl_angina['Sum','Sum'],'\n')
}
}
}
chisq.test(tbl_angina, correct=F)
data_copy = data.frame(data);
tracemem(data)==tracemem(data_copy);
untracemem(data_copy);
tbl_heart_disease = table(data_copy$Sex)
print(tbl_heart_disease)
tbl_heart_disease = table(data_copy$Sex,
data_copy$HeartDisease)
tbl_heart_disease
added_margins_tbl_heart_disease = addmargins(tbl_heart_disease)
print(added_margins_tbl_heart_disease)
for (col_names in colnames(added_margins_tbl_heart_disease)){
for (row_names in rownames(added_margins_tbl_heart_disease)){
if (!(row_names == 'Sum' | col_names == 'Sum') ){
cat('Očekivane frekvencije za razred ',col_names,'-',row_names,': ',(added_margins_tbl_heart_disease[row_names,'Sum'] * added_margins_tbl_heart_disease['Sum',col_names]) / added_margins_tbl_heart_disease['Sum','Sum'],'\n')
}
}
}
chisq.test(tbl_heart_disease, correct=F)
data_copy = data.frame(data);
tracemem(data)==tracemem(data_copy);
untracemem(data_copy);
tbl_pain_type = table(data_copy$Sex)
print(tbl_pain_type)
tbl_pain_type = table(data_copy$Sex,
data_copy$ChestPainType)
tbl_pain_type
added_margins_tbl_pain_type = addmargins(tbl_pain_type)
print(added_margins_tbl_pain_type)
for (col_names in colnames(added_margins_tbl_pain_type)){
for (row_names in rownames(added_margins_tbl_pain_type)){
if (!(row_names == 'Sum' | col_names == 'Sum') ){
cat('Očekivane frekvencije za razred ',col_names,'-',row_names,': ',(added_margins_tbl_pain_type[row_names,'Sum'] * added_margins_tbl_pain_type['Sum',col_names]) / added_margins_tbl_pain_type['Sum','Sum'],'\n')
}
}
}
chisq.test(tbl_pain_type, correct=F)
